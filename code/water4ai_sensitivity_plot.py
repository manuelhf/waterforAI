# -*- coding: utf-8 -*-
"""water4AI_sensitivity_plot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hFw1DKKymY1pAzZANblKaK5d7XbUOchI
"""

import numpy as np
import matplotlib.pyplot as plt

# ---------------------------
# SETUP: Baseline and Sensitivity Deltas
# ---------------------------

# Baseline value for 2050 water use (in billion litres/day) under BAU scenario
baseline_value = 28.11

# These are illustrative constants used in your full simulation setup
# (not directly used in plotting but included for documentation clarity)
base_WUE = 1.8     # Water Usage Effectiveness (litres/kWh)
base_PUE = 1.2     # Power Usage Effectiveness (dimensionless)
base_EWIF = 1.5    # Electricity Water Intensity Factor (litres/kWh)
base_EWE = 1.0     # Embodied Water Efficiency (proxy unit)

# Estimated deltas (in billion litres/day) based on ±20% changes from full Monte Carlo simulations
# Each entry: [change from −20% parameter value, change from +20% parameter value]
# These represent how water demand in 2050 deviates from baseline when each parameter is perturbed
deltas = {
    "WUE": [-2.25, 2.45],
    "PUE": [-1.85, 1.92],
    "EWIF": [-2.01, 2.08],
    "EWE": [-0.63, 0.71]  # "EWE" used here as a placeholder for EWU (embodied water use)
}

# ---------------------------
# PROCESS: Convert to Relative Changes (%)
# ---------------------------

# Compute percentage changes from the baseline for each parameter
percent_impacts = {
    k: [100 * delta[0] / baseline_value, 100 * delta[1] / baseline_value]
    for k, delta in deltas.items()
}

# Extract parameter names and corresponding percentage values for plotting
labels = list(percent_impacts.keys())
low_vals = [percent_impacts[k][0] for k in labels]   # Impact of −20%
high_vals = [percent_impacts[k][1] for k in labels]  # Impact of +20%

# Horizontal bar placement
x_pos = np.arange(len(labels))

# ---------------------------
# PLOT: Tornado Diagram
# ---------------------------

fig, ax = plt.subplots(figsize=(10, 6))
bar_width = 0.35  # Thickness of each horizontal bar

# Bar for −20% change (left side of 0 axis)
ax.barh(x_pos, low_vals, height=bar_width, color='salmon', label='−20%')

# Bar for +20% change (right side of 0 axis)
ax.barh(x_pos + bar_width, high_vals, height=bar_width, color='skyblue', label='+20%')

# Add central reference line at 0
ax.axvline(0, color='gray', linewidth=1, linestyle='--')

# Customise axes and labels
ax.set_yticks(x_pos + bar_width / 2)
ax.set_yticklabels(labels, fontsize=13)
ax.set_xlabel('Relative change in 2050 water use (%)', fontsize=13)
ax.tick_params(axis='x', labelsize=11)
ax.tick_params(axis='y', labelsize=13)
ax.legend(fontsize=11)
plt.tight_layout()

# ---------------------------
# OUTPUT: Show or Save Plot
# ---------------------------

# Uncomment to save instead of display:
# plt.savefig("figures/tornado_plot.png", dpi=300)

plt.show()